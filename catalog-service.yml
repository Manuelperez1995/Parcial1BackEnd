server:
  port: ${PORT:${SERVER_PORT:0}}

spring:
  application:
    name: catalog-service
  mongodb:
    embedded:
      version: 4.0.2
  data:
    mongodb:
      database: catalog
      port: 27017
  zipkin:
      base-url: http://localhost:9411/
      enabled: true
  rabbitmq:
    listener:
      simple:
        default-requeue-rejected: false
    binding:
      listener:
        simple:
          queues:
            - name: ${queue.movie.name}
            - name: ${queue.serie.name}
    queues:
      - name: ${queue.movie.name}
        durable: true
      - name: ${queue.serie.name}
        durable: true
    host: localhost
    port: 5672
    username: guest
    password: guest

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 5
    healthcheck:
      enabled: true
    service-url:
      default-zone: http://localhost:8761/eureka
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10

management:
    endpoints:
        web:
            exposure:
                include: '*'
    health:
        circuitbreakers:
            enabled: true
    endpoint:
        health:
            show-details: always
resilience4j:
    circuitbreaker:
        instances:
            movies:
                slidingWindowType: COUNT_BASED
                slidingWindowSize: 5
                failureRateThreshold: 50
                #        tiempo de espera en milisegundos en estado abierto
                waitDurationInOpenState: 15000
                #        para ver si el servicio se recuperó, le voy a decir, esperá 3 llamadas para poder decir, pasalo a estado cerrado
                permittedNumberOfCallsInHalfOpenState: 3
                #        vamos a definir que hacemos con el estado del servicio cuando se abrio
                #        esto esa para ver la informacion del servicio en actuator
                registerHealthIndicator: true
                #        aca le decimos marca el servicio como down q no lo pueda ver nadie, esta en false porque tenemos q ver
                #         como pasamos el serv a up
                allowHealthIndicatorToFail: false
                automaticTransitionFromOpenToHalfOpenEnabled: true
   
    #  Lo que vemos en el retry es cuanto tiempo queremos esperar entre cada uno de los reintentos
    retry:
        instances:
            movies:
                waitDuration: 1000
                #        Le decimos la cantidad de reintentos que queremos hacer
                maxAttempts: 3
                #        y la excepción contra la q queremos reintentar
                retryExceptions:
                    - feign.FeignException$InternalServerError

queue:
  movie:
    name: MovieQueue
  serie:
    name: SerieQueue
